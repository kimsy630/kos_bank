<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace = "spring.mvc.teamProject.persistence.FinancialProductsDAO">
	
	<!-- ============================================================================ -->
	<!-- 박서하 -->
	<select id="getLoanCount" resultType="int"> <!-- 대출상품 조회 -->
		SELECT COUNT(*)
		FROM Loans_product
	</select>
	
	<select id="getLoanList" resultType="spring.mvc.teamProject.vo.Loans_productVO"> <!-- 대출상품 조회 -->
		SELECT d_name, d_summary, d_max_price
		 FROM Loans_product
	</select>
	
	<select id="getLoanDetail" resultType="spring.mvc.teamProject.vo.Loans_productVO"> <!-- 대출상품 상세조회 -->
		SELECT d_name, d_summary, d_min_date, d_max_date, d_interest_rate, d_min_price, d_max_price, d_explanation1, d_explanation2, d_explanation3
		 FROM Loans_product
		 WHERE d_name=#{d_name}
	</select>
	<!-- ============================================================================ -->
	
	<select id="selectById" resultType="spring.mvc.teamProject.vo.AccountVO" >
		 select *
		 from account_info
         where id = #{id} AND accountType = '입출금' AND accountState = '정상'
	</select>
	
	<select id="checkPwd" resultType="int">
		select COUNT(*) 
		from account_info
		where account = #{account} AND accountPW = #{accountPW}
	</select>
	
	<select id="checkBalance" resultType="int">
		<![CDATA[
		select COUNT(*)
		from account_info
		where account = #{account} AND Balance >= #{balance}
		]]> 
	</select>
	
	<select id="getDepositAccount" resultType="String">
		SELECT '33'||'-'||'03'||'-'||LPAD(SEQ_ACCOUNT.NEXTVAL,6,0)
		FROM DUAL
	</select>
	
	<select id="getSavingsAccount" resultType="String">
		SELECT '33'||'-'||'02'||'-'||LPAD(SEQ_ACCOUNT.NEXTVAL,6,0)
		FROM DUAL
	</select>
	
	<select id="getSavingsList" resultType="spring.mvc.teamProject.vo.savings_productVO">
		select * from savings_product
	</select>
	
	<select id="getDepositList" resultType="spring.mvc.teamProject.vo.Deposit_productVO">
		select * from deposit_product
	</select>
	
	<select id="getSavingsDetail" resultType="spring.mvc.teamProject.vo.savings_productVO">
		select * 
		from savings_product
		where j_name = #{j_name}
	</select>
	
	<select id="getDepositDetail" resultType="spring.mvc.teamProject.vo.Deposit_productVO">
		select * 
		from deposit_product
		where y_name = #{y_name}
	</select>
	
	<insert id="insertDepositAccount" parameterType="spring.mvc.teamProject.vo.AccountVO">
		INSERT INTO account_info(account,ID,accountPW,accountType,accountState)
		VALUES(#{account},#{id},#{accountPW},'예금','대기')
	</insert>
	
	<insert id="insertDeposit" parameterType="spring.mvc.teamProject.vo.Fixed_depositVO">
		INSERT INTO fixed_deposit(y_Key, y_name, account, y_rate, y_type, y_balance, y_end_date, y_month)
		VALUES(SEQ_DEPOSIT.NEXTVAL, #{y_name}, #{account}, #{y_rate}, #{y_type}, #{y_balance}, #{y_end_date}, #{y_month})
	</insert>
	
	<insert id="insertSavingsAccount" parameterType="spring.mvc.teamProject.vo.AccountVO">
		INSERT INTO account_info(account,ID,accountPW,accountType,accountState)
		VALUES(#{account},#{id},#{accountPW},'적금','대기')
	</insert>
	
	<insert id="insertFreeSavings" parameterType="spring.mvc.teamProject.vo.installment_savingsVO">
		INSERT INTO installment_savings(j_Key, j_name, account, j_rate, j_type, j_method, j_end_date)
		VALUES(SEQ_SAVINGS.NEXTVAL, #{j_name}, #{account}, #{j_rate}, #{j_type}, #{j_method}, #{j_end_date})
	</insert>
	
	<insert id="insertFixedSavings" parameterType="spring.mvc.teamProject.vo.installment_savingsVO">
		INSERT INTO installment_savings(j_Key, j_name, account, j_rate, j_money, j_type, j_method, j_end_date, j_auto_date)
		VALUES(SEQ_SAVINGS.NEXTVAL, #{j_name}, #{account}, #{j_rate}, #{j_money}, #{j_type}, #{j_method}, (TO_TIMESTAMP#{j_end_date}, 'YYYY-MM-DD') #{j_auto_date})
	</insert>
	
	<select id="getName" resultType="String">
		SELECT name 
		  FROM Members 
		 WHERE ID = #{ID}
	</select>
	
	<insert id="AutoTransferAdd" parameterType="spring.mvc.teamProject.vo.AutoTransferVO">
		INSERT 
		INTO auto_transfer
			(jd_key, account, jd_autoMoney, 
			jd_outDate,	jd_account, jd_inPlace)
		VALUES(
			SEQ_AUTOTRANSFER.nextval, #{account}, #{jd_autoMoney},
			#{jd_outDate}, #{jd_account}, #{jd_inPlace})
	</insert> 
	
	<select id="selectDepositEnd" resultType="spring.mvc.teamProject.vo.Fixed_depositVO">
		select * from fixed_deposit where y_end_date = TO_TIMESTAMP(sysdate, 'YYYY-MM-DD')
	</select>
	
	<update id="endDeposit" parameterType="spring.mvc.teamProject.vo.Fixed_depositVO">
		UPDATE fixed_deposit
		  SET y_state = '만기'
		 WHERE account = #{account}
	</update>
	
	<update id="returnDeposit" parameterType="spring.mvc.teamProject.vo.AccountVO">
		UPDATE account_info 
		   SET Balance = #{balance}
		 WHERE account = #{account}
	</update>
			
</mapper>